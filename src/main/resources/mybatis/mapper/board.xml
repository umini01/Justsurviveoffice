<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->

<mapper namespace="board">

	<!-- 파일첨부 안 된 게시물 업로드 -->
	<insert id="insertBoard" parameterType="BoardDTO">
		insert into Board(BOARDNO, FK_ID, FK_CATEGORYNO, BOARDNAME, BOARDCONTENT)
               values(board_seq.nextval, #{fk_id}, #{fk_categoryNo}, #{boardName}, #{boardContent})
	</insert>
	
  	<!-- 파일첨부 된 게시물 업로드 -->
    <insert id="insertBoardWithFile" parameterType="BoardDTO">
   		insert into Board(BOARDNO, FK_ID, FK_CATEGORYNO, BOARDNAME, BOARDCONTENT,
                		  BOARDFILENAME, BOARDFILEORIGINNAME)
               values(board_seq.nextval, #{fk_id}, #{fk_categoryNo}, #{boardName}, #{boardContent},
               		  #{boardFileName}, #{boardFileOriginName}) 
    </insert>
    
    
    <!-- 파일첨부 된 게시물 업로드 -->
    <update id="updateBoard" parameterType="BoardDTO">
   		update Board
    	set boardName = #{boardName}, boardContent = #{boardContent}
    	<if test="boardFileName == null">
    		,boardFileName = null
    		,boardFileOriginName = null
    	</if>
    	<if test="boardFileName != null">
    		,boardFileName = #{boardFileName}
    		,boardFileOriginName = #{boardFileOriginName}
    	</if>
    	where boardNo = #{boardNo}
    </update>
    
    <!-- 게시판 접근! -->
    <select id="selectBoardList" parameterType="HashMap" resultType="BoardDTO">
    	select boardNo, fk_id, 
    		   case
    		   	when length(boardName) > 12
    		   		then substr(boardName, 1, 12)
    		   		else boardName
    		   	end as boardName,
     		   boardContent,
               BoardFileName, BoardFileOriginName, readcount, 
               to_char(updatedAtBoard, 'yyyy-mm-dd hh24:mi:ss') as updatedAtBoard,
               case
		        when (sysdate - updatedAtBoard) * 24 * 60 &lt; 60 
		            then trunc( (sysdate - updatedAtBoard) * 24 * 60) ||'분 전'
		        when (sysdate - updatedAtBoard) * 24 &lt; 24
		            then trunc( (sysdate - updatedAtBoard) * 24 )||'시간 전'
		        when (sysdate - updatedAtBoard) &lt; 7
		            then trunc(sysdate - updatedAtBoard)||'일 전'
		        else to_char(updatedAtBoard, 'yyyy-mm-dd')
		        end as formattedDate
			   from board
			   where boardDeleted = 0
			<if test='categoryNo != ""'>
				and fk_categoryNo = to_number(#{category})
			</if>
		<choose>
            <when test='searchType == "boardName" and searchWord != ""'>
                and lower(boardName) like '%'||lower(#{searchWord})||'%'
            </when>
            <when test='searchType == "boardContent" and searchWord != ""'>
                and lower(boardContent) like '%'||lower(#{searchWord})||'%'
            </when>
            <when test='searchType == "boardName_boardContent" and searchWord != ""'>
                and ( lower(boardName) like '%'||lower(#{searchWord})
               		||'%' or lower(boardContent) like '%'||lower(#{searchWord})||'%' ) 
            </when>
            <when test='searchType == "fk_id" and searchWord != ""'>
            	and lower(fk_id) like '%'||lower(#{searchWord})||'%'
            </when>
		</choose>
        order by boardNo desc
        offset ((to_number(#{currentShowPageNo}) - 1) * 5) rows
        fetch next 5 row only
    </select>

	<select id="selectView" resultType="BoardDTO" parameterType="long">
  		SELECT
		      A.boardNo,
		      A.fk_id,
		      A.fk_categoryNo,
		      A.boardName,
		      A.boardContent,
		      A.boardFileName,
		      A.boardFileOriginName,
		      A.readCount,
		      TO_CHAR(A.updatedAtBoard, 'yyyy-mm-dd hh24:mi:ss') AS updatedAtBoard,
		      CASE
		          WHEN (SYSDATE - A.updatedAtBoard) * 24 * 60 &lt; 60
		              THEN TRUNC( (SYSDATE - A.updatedAtBoard) * 24 * 60 ) || '분 전'
		          WHEN (SYSDATE - A.updatedAtBoard) * 24 &lt; 24
		              THEN TRUNC( (SYSDATE - A.updatedAtBoard) * 24 ) || '시간 전'
		          WHEN (SYSDATE - A.updatedAtBoard) &lt; 7
		              THEN TRUNC( SYSDATE - A.updatedAtBoard ) || '일 전'
		          ELSE TO_CHAR(A.updatedAtBoard, 'yyyy-mm-dd')
		      END AS formattedDate,
		
		      A.preNo,  A.preName, A.nextNo, A.nextName,
		      C.categoryName, C.categoryDescribe, C.categoryImagePath
	  	FROM (
		      SELECT
		          LEAD(B.boardNo)   OVER (PARTITION BY fk_categoryNo ORDER BY B.boardNo DESC) AS preNo,
		          LEAD(B.boardName) OVER (PARTITION BY fk_categoryNo ORDER BY B.boardNo DESC) AS preName,
		          LAG (B.boardNo)   OVER (PARTITION BY fk_categoryNo ORDER BY B.boardNo DESC) AS nextNo,
		          LAG (B.boardName) OVER (PARTITION BY fk_categoryNo ORDER BY B.boardNo DESC) AS nextName,
		          B.boardNo,
		          B.fk_id,
		          B.fk_categoryNo,
		          B.boardName,
		          B.boardContent,
		          B.BoardFileName,
		          B.BoardFileOriginName,
		          B.readCount,
		          B.updatedAtBoard
		      FROM board B
		      WHERE B.boardDeleted = 0
		  ) A
	  	JOIN category C ON A.fk_categoryNo = C.categoryNo
	  	WHERE A.boardNo = #{boardNo} and A.fk_categoryNo = C.categoryNo
	</select>
  	
  	<!-- 모든 카테고리와, 각 카테고리별 게시물을 3개씩 가져오는 메소드 -->
  	<select id="selectBoardListAll" parameterType="HashMap" resultType="BoardDTO">
		select *
		from (
		    select
		        boardNo, fk_id,
		        case when length(boardName) &gt; 12 
		             then substr(boardName, 1, 12)
		             else boardName end as boardName,
		        boardContent, BoardFileName, BoardFileOriginName, readcount,
		        to_char(updatedAtBoard, 'yyyy-mm-dd hh24:mi:ss') AS updatedAtBoard,
		        case
		            when (SYSDATE - updatedAtBoard) * 24 * 60 &lt; 60 
		                then trunc((SYSDATE - updatedAtBoard) * 24 * 60) || '분 전'
		            when (SYSDATE - updatedAtBoard) * 24 &lt; 24
		                then trunc((SYSDATE - updatedAtBoard) * 24) || '시간 전'
		            when (SYSDATE - updatedAtBoard) &lt; 7
		                then trunc(SYSDATE - updatedAtBoard) || '일 전'
		            else to_char(updatedAtBoard, 'yyyy-mm-dd')
		        end as formattedDate,
		        fk_categoryNo, categoryName,
		        row_number() over (partition by fk_categoryNo order by boardNo desc) as rnum
		    from board join category on fk_categoryNo = categoryNo 
		    where boardDeleted = 0
		    <choose>
		            <when test='searchType == "boardName" and searchWord != ""'>
		                and lower(boardName) like '%'||lower(#{searchWord})||'%'
		            </when>
		            <when test='searchType == "boardContent" and searchWord != ""'>
		                and lower(boardContent) like '%'||lower(#{searchWord})||'%'
		            </when>
		            <when test='searchType == "boardName_boardContent" and searchWord != ""'>
		                and ( lower(boardName) like '%'||lower(#{searchWord})
		               		||'%' or lower(boardContent) like '%'||lower(#{searchWord})||'%' ) 
		            </when>
		            <when test='searchType == "fk_id" and searchWord != ""'>
		            	and lower(fk_id) like '%'||lower(#{searchWord})||'%'
		            </when>
				</choose>
		) sub
		where sub.rnum &lt;= 3
		order by sub.fk_categoryNo, sub.boardNo desc   		
  	</select>
  	
  	
  	<update id="softDeleteBoard" parameterType="Long">
 		update board 
  		set boardDeleted = 1
  		where boardNo = #{boardNo} and boardDeleted = 0	
  	</update>

	<update id="updateReadCount" parameterType="Long">
		update board
		set readCount = readCount + 1 
		where boardNo = #{boardNo} and boardDeleted = 0
	</update>

	
	 <select id="getIndexList" parameterType="string" resultType="map">
	  SELECT
	      C.categoryNo         AS "categoryNo",
	      C.categoryName       AS "categoryName",
	      C.categoryDescribe   AS "categoryDescribe",
	      C.categoryImagePath  AS "categoryImagePath",
	      COUNT(B.boardNo)     AS "boardCount",
	      NVL(MAX(TA.tags), '') AS "tags"
	  FROM category C
		  LEFT JOIN board B
		         ON B.fk_categoryNo = C.categoryNo
		  LEFT JOIN (
		      SELECT
		          T.fk_categoryNo AS categoryNo,
		          LISTAGG('#' || T.tagName, ' ') WITHIN GROUP (ORDER BY T.tagNo) AS tags
		      FROM tag T
		      GROUP BY T.fk_categoryNo
		  ) TA
		  ON TA.categoryNo = C.categoryNo
	<where>
		 <if test="_parameter != null and _parameter != ''">
		    C.categoryNo = TO_NUMBER(#{_parameter})
		  </if>
	  </where>
	  GROUP BY
	      C.categoryNo, C.categoryName, C.categoryDescribe, C.categoryImagePath
	  ORDER BY C.categoryNo
</select>
	 
	 <!-- <select id="getIndexList" resultType="CategoryDTO">
          select categoryNo, categoryName, categoryImagePath, categoryDescribe,
          		 LISTAGG(tagName, ',') WITHIN GROUP (ORDER BY tagNo) AS tags 
          from category C join tag T  
          on C.categoryNo = T.fk_categoryNo 
          group by (categoryNo, categoryName, categoryImagePath,categoryDescribe)
	</select> -->
      
   
   <!-- 서브쿼리 쓴 이유 (김예준)
   		1. SQL은 FROM -> where -> having -> group by ->order by -> select 순이다
   		2. 그래서 서브쿼리를 안쓰고 where 절 쓸 시 한행만 도출되고 나머진 버려져서 안나옴
   		
    -->
  	<select id="getView" resultType="BoardDTO" parameterType="long">
		  SELECT
		      A.preNo, A.preName,
		      A.nextNo, A.nextName,
		      A.boardNo, A.boardName, A.boardContent, A.fkId
		  FROM (
			      SELECT
			          LEAD(B.boardNo)   OVER (ORDER BY B.boardNo DESC) AS preNo,
			          LEAD(B.boardName) OVER (ORDER BY B.boardNo DESC) AS preName,
			          LAG (B.boardNo)   OVER (ORDER BY B.boardNo DESC) AS nextNo,
			          LAG (B.boardName) OVER (ORDER BY B.boardNo DESC) AS nextName,
			          B.boardNo,
			          B.boardName,
			          B.boardContent,
			          B.fk_id AS fkId
			      FROM board B
			      JOIN category C ON B.fk_categoryNo = C.categoryNo
			      WHERE B.boardDeleted = 0
		  ) A
		  WHERE A.boardNo = #{boardNo}
	</select>
	
	<!-- ================================================================================= -->
	<!-- 인기 게시글 리스트 (조회수 많은 순) -->
	<resultMap type="HashMap" id="getTopBoardsByViewCount_map">
		<result property="rank" column="RANK_NO" javaType="Integer" />
		<result property="boardNo" column="FK_BOARDNO" javaType="Long" />
		<result property="boardName" column="BOARDNAME" javaType="String" />
		<result property="fk_categoryNo" column="FK_CATEGORYNO" javaType="Long" />
		<result property="readCount" column="READCOUNT" javaType="Integer" />
	</resultMap>
	<select id="getTopBoardsByViewCount" resultMap="getTopBoardsByViewCount_map">
		select RANK_NO, FK_BOARDNO, BOARDNAME, FK_CATEGORYNO, READCOUNT
		from BOARD_RANKING_WEEKLY R join Board B
		on R.FK_BOARDNO = B.boardNo
		where RANK_TYPE = 'VIEWS'
	</select>
	
	
	<!-- <select id="getTopBoardsByViewCount" resultType="BoardDTO">
	    select *
		from(
		     select ROWNUM as RANK, BOARDNO, BOARDNAME, FK_CATEGORYNO, READCOUNT
			 from (
			       select BOARDNO, BOARDNAME, FK_CATEGORYNO, READCOUNT
			       from BOARD
			       where CREATEDATBOARD &gt;= ADD_MONTHS(SYSDATE, -1)
			       order by READCOUNT desc, CREATEDATBOARD desc
			      )
			)
		WHERE RANK &lt;= 5
	</select> -->
	    
	    
	<!-- 댓글 많은 게시글 리스트 -->
<!-- 
	<resultMap type="HashMap" id="getTopBoardsByCommentCount_map">
		<result property="rank" column="RANK_NO" javaType="Integer" />
		<result property="boardNo" column="FK_BOARDNO" javaType="Long" />
		<result property="boardName" column="BOARDNAME" javaType="String" />
		<result property="fk_categoryNo" column="FK_CATEGORYNO" javaType="Long" />
		<result property="commentCount" column="COMMENTCOUNT" javaType="Integer" />
	</resultMap>
	<select id="getTopBoardsByCommentCount" resultMap="getTopBoardsByCommentCount_map">
		select RANK_NO, R.FK_BOARDNO, BOARDNAME, FK_CATEGORYNO, NVL(C.COMMENTCOUNT, 0) AS COMMENTCOUNT
		from BOARD_RANKING_WEEKLY R join BOARD B on R.FK_BOARDNO = B.boardNo 
			 join (select FK_BOARDNO, count(*) AS COMMENTCOUNT
			 	   from COMMENTS
			 	   GROUP BY FK_BOARDNO
			 	  ) C on B.BOARDNO = C.FK_BOARDNO
		where RANK_TYPE = 'COMMENTS'
		order by RANK_NO
	</select>
-->    
    
    <select id="getTopBoardsByCommentCount" resultType="BoardDTO">
		select *
		from (
		    select row_number() over (
		               order by count(c.commentno) desc, b.createdatboard asc
		           ) as rank,
		           b.boardno, b.boardname, b.fk_categoryno, count(c.commentno) as commentCount, b.createdatboard
		    from board b join comments c 
		    on b.boardno = c.fk_boardno
		    group by b.boardno, b.boardname, b.fk_categoryno, b.createdatboard
		) t
		where rank &lt;= 5
    </select>
	<!-- ================================================================================= -->
	
  	
  	<!-- ===== 내가 작성한 글 목록 ===== -->
    <select id="getMyBoards" parameterType="string" resultType="BoardDTO">
        SELECT boardno, fk_categoryno, 
              case
                  when length(boardName) &gt; 12
                then substr(boardName, 1, 12)
                  else boardName
             end as boardName, 
             createdatboard, updatedatboard, readcount, fk_id, boardfilename, boardfileoriginname, boarddeleted, 
             case
                  when length(boardcontent) &gt; 12
                  then substr(boardcontent, 1, 12)
                  else boardcontent
             end as boardcontent
      FROM board
        WHERE fk_id = #{fk_id} 
        ORDER BY createdAtBoard DESC
    </select>
    
    
    <!-- ===== 내가 작성한 글 목록 스크롤 ===== -->
    <select id="myBoardsScroll" parameterType="map" resultType="BoardDTO">
    	SELECT boardNo, fk_categoryNo, 
              case
                  when length(boardName) &gt; 12
                then substr(boardName, 1, 12)
                  else boardName
             end as boardName, 
             createdAtBoard, updatedAtBoard, readCount, fk_id, boardFileName, boardFileOriginName, boardDeleted, 
             case
                  when length(boardContent) &gt; 12
                  then substr(boardContent, 1, 12)
                  else boardContent
             end as boardContent
      	FROM board
        WHERE fk_id = #{id}
        ORDER BY createdAtBoard DESC
  		OFFSET #{start,jdbcType=INTEGER} ROWS FETCH NEXT #{len,jdbcType=INTEGER} ROWS ONLY
	</select>
    

	<!-- 북마크한 게시글 목록 -->
	<select id="getBookmarksById" parameterType="string" resultType="com.spring.app.bookmark.domain.BookMarkDTO">
    	select bookmark.bookmarkNo,
	           bookmark.fk_id,
	           bookmark.fk_boardNo,
	           bookmark.createdAtMark,
	           board.boardName,
	           board.boardContent,
	           board.createdAtBoard
	    from bookmark bookmark
	    join Board board ON bookmark.fk_boardNo = board.boardNo
	    where bookmark.fk_id = #{fk_id}
	    order by bookmark.createdAtMark DESC
	</select>
	
	
  	<!-- 총 검색된 게시물 건수 -->
  	<select id="searchListCount" parameterType="HashMap" resultType="int">
  		select count(*)
  		from board
  		where boardDeleted = 0
			<if test='categoryNo != ""'>
				and fk_categoryNo = to_number(#{category})
			</if>
		<choose>
            <when test='searchType == "boardName" and searchWord != ""'>
                and lower(boardName) like '%'||lower(#{searchWord})||'%'
            </when>
            <when test='searchType == "boardContent" and searchWord != ""'>
                and lower(boardContent) like '%'||lower(#{searchWord})||'%'
            </when>
            <when test='searchType == "boardName_boardContent" and searchWord != ""'>
                and ( lower(boardName) like '%'||lower(#{searchWord})
               		||'%' or lower(boardContent) like '%'||lower(#{searchWord})||'%' ) 
            </when>
            <when test='searchType == "fk_id" and searchWord != ""'>
            	and lower(fk_id) like '%'||lower(#{searchWord})||'%'
            </when>
		</choose>
  	</select>
  	
  	
  	<!-- 자동 검색어 완성 -->
  	<select id="getSearchWordList" parameterType="HashMap" resultType="String">
  		<choose>
  			<when test='searchType == "boardName" and searchWord != ""' >
  				select boardname
  				from board
  				where boardDeleted = 0
				<if test='categoryNo != ""'>
					and fk_categoryNo = to_number(#{category})
				</if>
				and lower(boardName) like '%' || lower(#{searchWord}) || '%'
				order by createdAtBoard
  			</when>
  			<when test='searchType == "boardContent" and searchWord != ""'>
  				select boardname
  				from board
  				where boardDeleted = 0
				<if test='categoryNo != ""'>
					and fk_categoryNo = to_number(#{category})
				</if>
				and lower(boardContent) like '%' || lower(#{searchWord}) || '%'
				order by createdAtBoard
  			</when>
  			<when test='searchType == "boardName_boardContent" and searchWord != ""'>
  				select boardname
  				from board
  				where boardDeleted = 0
				<if test='categoryNo != ""'>
					and fk_categoryNo = to_number(#{category})
				</if>
				 and ( lower(boardName) like '%'||lower(#{searchWord})
               		||'%' or lower(boardContent) like '%'||lower(#{searchWord})||'%' ) 
				order by createdAtBoard
  			</when>
  			<when test='searchType == "fk_id" and searchWord != ""'>
  				SELECT DISTINCT fk_id
				FROM board 
				WHERE boardDeleted = 0 
				<if test='categoryNo != ""'>
					AND fk_categoryNo = TO_NUMBER(#{category})
				</if>
				AND lower(fk_id) LIKE '%' || lower(#{searchWord}) || '%'
				ORDER BY fk_id
  			</when>
  		</choose>
  	</select>
  	
  	
  	<!-- 키워드 테이블에서 데이터 가져오기 -->
  	<resultMap type="HashMap" id="getBoardContents_map">
  		<result property="keyword" column="KEYWORD" javaType="String" />
  		<result property="score" column="SCORE" javaType="Integer" />
  	</resultMap>
  	<select id="getBoardContents" parameterType="String" resultMap="getBoardContents_map">
  		SELECT KEYWORD, SCORE
		FROM KEYWORD_RANKING
		WHERE FK_CATEGORYNO = TO_NUMBER(#{category})
		ORDER BY SCORE DESC
  	</select>
  	
  	<select id="getCreatedAtBoardCnt" parameterType="String" resultType="Int">
  		select count(*) from board
		where fk_id = #{id} and (sysdate - createdAtBoard) &lt;= 1
  	</select>
  	
  	<update id="recoveryBoard" parameterType="String">
  		update board set boardDeleted = 0
  		where boardNo = #{boardNo}
  	</update>
  	
</mapper>